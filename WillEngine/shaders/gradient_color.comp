#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba16f,set = 0, binding = 0) uniform image2D image;

//push constants block
layout( push_constant ) uniform constants
{
 vec4 data1;
 vec4 data2;
 vec4 data3;
 vec4 data4;
} PushConstants;

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

	ivec2 size = imageSize(image);

    vec4 topColor = PushConstants.data1;
    vec4 bottomColor = PushConstants.data2;

    if(texelCoord.x < size.x && texelCoord.y < size.y)
    {
        float blend = float(texelCoord.y)/(size.y); 
    
        imageStore(image, texelCoord, mix(topColor,bottomColor, blend));

        // Compute Shader Colored Triangle
        ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
        ivec2 imgSize = imageSize(image);
        vec2 uv = (vec2(coord) / vec2(imgSize)) * 2.0 - 1.0;

        vec3 color = vec3(0.0);

        vec2 v0 = vec2(0.0, -0.5); // top vertex
        vec2 v1 = vec2(0.5, 0.5); // bottom-left vertex
        vec2 v2 = vec2(-0.5, 0.5); // bottom-right vertex

        // Barycentric Coordinates 
        vec2 v0v1 = v1 - v0;
        vec2 v0v2 = v2 - v0;
        vec2 v0p = uv - v0;

        float d00 = dot(v0v1, v0v1);
        float d01 = dot(v0v1, v0v2);
        float d11 = dot(v0v2, v0v2);
        float d20 = dot(v0p, v0v1);
        float d21 = dot(v0p, v0v2);

        float denom = d00 * d11 - d01 * d01;
        float v = (d11 * d20 - d01 * d21) / denom;
        float w = (d00 * d21 - d01 * d20) / denom;
        float u = 1.0 - v - w;

        if (u >= 0.0 && v >= 0.0 && w >= 0.0) {
            color = vec3(u, v, w);
        }

        imageStore(image, coord, vec4(color, 1.0));
        // End Triangle
    }

    
        
}
